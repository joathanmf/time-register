services:
  db:
    image: postgres:18-alpine
    container_name: rails_api_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-time_register_development}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - rails_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rails_api_app
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails server -b 0.0.0.0"
    environment:
      RAILS_ENV: ${RAILS_ENV:-development}
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_NAME: ${POSTGRES_DB:-time_register_development}
      DATABASE_USER: ${POSTGRES_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-5}
    volumes:
      - .:/app
      - bundle_cache:/usr/local/bundle
      - rails_cache:/app/tmp/cache
    ports:
      - "${RAILS_PORT:-3000}:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - rails_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/up || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    stdin_open: true
    tty: true

networks:
  rails_network:
    driver: bridge

volumes:
  postgres_data:
  bundle_cache:
  rails_cache: