services:
  db:
    image: postgres:18-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - rails_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:8-alpine
    volumes:
      - redis_data_prod:/data
    networks:
      - rails_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RUBY_VERSION: 3.4.2
    command: bash -c "rm -f tmp/pids/server.pid && ./bin/rails server -b 0.0.0.0"
    environment:
      RAILS_ENV: production
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      REDIS_URL: redis://redis:6379/0
      RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-5}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
    volumes:
      - storage_prod:/rails/storage
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rails_network_prod
    restart: unless-stopped

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RUBY_VERSION: 3.4.2
    command: bundle exec sidekiq -C config/sidekiq.yml
    environment:
      RAILS_ENV: production
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      REDIS_URL: redis://redis:6379/0
      RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-5}
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
    volumes:
      - storage_prod:/rails/storage
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rails_network_prod
    restart: unless-stopped

networks:
  rails_network_prod:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
  storage_prod:

